# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_core.ipynb.

# %% auto 0
__all__ = ['QueryResult', 'dataset_from_query_results', 'Filter', 'PassThroughFilter', 'Score', 'VectorDatabase']

# %% ../nbs/01_core.ipynb 3
from .imports import *

# %% ../nbs/01_core.ipynb 5
class QueryResult():
    'Data model for emb_opt'
    def __init__(self, 
                 query_idx: int, # index of query vector
                 db_idx: int, # index of item in database
                 embedding: np.ndarray, # item embedding
                 distance: float, # distance to query vector
                 data: dict # any associated data
                ):
        self.query_idx = query_idx
        self.db_idx = db_idx
        self.embedding = embedding
        self.distance = distance
        self.data = data
        
    def to_dict(self) -> dict:
        return {
            'query_idx' : self.query_idx,
            'db_idx' : self.db_idx,
            'embedding' : self.embedding,
            'distance' : self.distance,
            'data' : self.data
        }

# %% ../nbs/01_core.ipynb 6
def dataset_from_query_results(query_results: list[QueryResult]) -> Dataset:
    'generates a `Dataset` from a list of `QueryResult`'
    data_dicts = [i.to_dict() for i in query_results]
    return Dataset.from_list(data_dicts)

# %% ../nbs/01_core.ipynb 9
class Filter():
    'Filter query results with `filter_func`'
    def __init__(self, 
                 filter_func: Callable, # function to filter
                 filter_kwargs_dict: Optional[dict]=None # optional kwargs dict passed to `Dataset.filter`
                ):
        self.filter_func = filter_func
        self.filter_kwargs_dict = filter_kwargs_dict if filter_kwargs_dict else {}
        
    def __call__(self, query_dataset: Dataset) -> Dataset:
        return query_dataset.filter(lambda item: self.filter_func(item), **self.filter_kwargs_dict)
    
class PassThroughFilter(Filter):
    'Dummy filter'
    def __init__(self):
        pass
    def __call__(self, query_dataset: Dataset) -> Dataset:
        return query_dataset

# %% ../nbs/01_core.ipynb 12
class Score():
    'Score query results with `score_func`'
    def __init__(self, 
                 score_func: Callable, # score function to maximize
                 map_kwargs_dict: Optional[dict]=None # optional kwargs for `Dataset.map`
                ):
        self.score_func = score_func
        self.map_kwargs_dict = map_kwargs_dict if map_kwargs_dict else {}
        
    def __call__(self, query_dataset: Dataset) -> Dataset:
        
        return query_dataset.map(lambda item: {'score' : self.score_func(item)}, **self.map_kwargs_dict)

# %% ../nbs/01_core.ipynb 14
class VectorDatabase():
    'Base class for vector database backends'
    def query(self, query_vectors: np.ndarray) -> Dataset:
        raise NotImplementedError
