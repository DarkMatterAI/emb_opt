# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_data_source.ipynb.

# %% auto 0
__all__ = ['DataSourceModule']

# %% ../nbs/03_data_source.ipynb 3
from .imports import *
from .core import Module, build_batch_from_embeddings
from .schemas import Item, Query, Batch, DataSourceFunction, DataSourceResponse

# %% ../nbs/03_data_source.ipynb 4
class DataSourceModule(Module):
    def __init__(self,
                 name: str,
                 function: DataSourceFunction,
                ):
        super().__init__(name, DataSourceResponse, function)
        
    def gather_inputs(self, batch: Batch) -> (List[Tuple], List[BaseModel]):
        idxs, inputs = batch.flatten_queries()
        return (idxs, inputs)
    
    def scatter_results(self, batch: Batch, idxs: List[Tuple], results: List[DataSourceResponse]):
        for (q_idx, r_idx), result in zip(idxs, results):
            batch_item = batch.get_item(q_idx, r_idx)
            if result.data:
                batch_item.data.update(result.data)

            if result.valid:
                if result.query_results:
                    batch_item.add_query_results(result.query_results)

                else:
                    batch_item.data['_internal']['remove'] = True
                    batch_item.data['_internal']['remove_details'] = 'query returned no results'

            else:
                batch_item.data['_internal']['remove'] = True
                batch_item.data['_internal']['remove_details'] = 'query response invalid'
