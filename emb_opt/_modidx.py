# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/emb_opt',
                'doc_host': 'https://DarkMatterAI.github.io',
                'git_url': 'https://github.com/DarkMatterAI/emb_opt',
                'lib_path': 'emb_opt'},
  'syms': { 'emb_opt.data_source': { 'emb_opt.data_source.DataPluginGradWrapper': ( 'data_source.html#dataplugingradwrapper',
                                                                                    'emb_opt/data_source.py'),
                                     'emb_opt.data_source.DataPluginGradWrapper.__call__': ( 'data_source.html#dataplugingradwrapper.__call__',
                                                                                             'emb_opt/data_source.py'),
                                     'emb_opt.data_source.DataPluginGradWrapper.__init__': ( 'data_source.html#dataplugingradwrapper.__init__',
                                                                                             'emb_opt/data_source.py'),
                                     'emb_opt.data_source.DataPluginGradWrapper.gather_inputs': ( 'data_source.html#dataplugingradwrapper.gather_inputs',
                                                                                                  'emb_opt/data_source.py'),
                                     'emb_opt.data_source.DataPluginGradWrapper.scatter_results': ( 'data_source.html#dataplugingradwrapper.scatter_results',
                                                                                                    'emb_opt/data_source.py'),
                                     'emb_opt.data_source.DataSourceModule': ( 'data_source.html#datasourcemodule',
                                                                               'emb_opt/data_source.py'),
                                     'emb_opt.data_source.DataSourceModule.__init__': ( 'data_source.html#datasourcemodule.__init__',
                                                                                        'emb_opt/data_source.py'),
                                     'emb_opt.data_source.DataSourceModule.gather_inputs': ( 'data_source.html#datasourcemodule.gather_inputs',
                                                                                             'emb_opt/data_source.py'),
                                     'emb_opt.data_source.DataSourceModule.scatter_results': ( 'data_source.html#datasourcemodule.scatter_results',
                                                                                               'emb_opt/data_source.py'),
                                     'emb_opt.data_source.DataSourcePlugin': ( 'data_source.html#datasourceplugin',
                                                                               'emb_opt/data_source.py'),
                                     'emb_opt.data_source.DataSourcePlugin.__call__': ( 'data_source.html#datasourceplugin.__call__',
                                                                                        'emb_opt/data_source.py'),
                                     'emb_opt.data_source.NumpyDataPlugin': ('data_source.html#numpydataplugin', 'emb_opt/data_source.py'),
                                     'emb_opt.data_source.NumpyDataPlugin.__call__': ( 'data_source.html#numpydataplugin.__call__',
                                                                                       'emb_opt/data_source.py'),
                                     'emb_opt.data_source.NumpyDataPlugin.__init__': ( 'data_source.html#numpydataplugin.__init__',
                                                                                       'emb_opt/data_source.py'),
                                     'emb_opt.data_source.NumpyDataPlugin.get_data': ( 'data_source.html#numpydataplugin.get_data',
                                                                                       'emb_opt/data_source.py')},
            'emb_opt.executor': { 'emb_opt.executor.APIExecutor': ('executor.html#apiexecutor', 'emb_opt/executor.py'),
                                  'emb_opt.executor.APIExecutor.__init__': ('executor.html#apiexecutor.__init__', 'emb_opt/executor.py'),
                                  'emb_opt.executor.APIExecutor.execute': ('executor.html#apiexecutor.execute', 'emb_opt/executor.py'),
                                  'emb_opt.executor.APIExecutor.execute_async': ( 'executor.html#apiexecutor.execute_async',
                                                                                  'emb_opt/executor.py'),
                                  'emb_opt.executor.APIExecutor.function': ('executor.html#apiexecutor.function', 'emb_opt/executor.py'),
                                  'emb_opt.executor.Executor': ('executor.html#executor', 'emb_opt/executor.py'),
                                  'emb_opt.executor.Executor.__call__': ('executor.html#executor.__call__', 'emb_opt/executor.py'),
                                  'emb_opt.executor.Executor.__init__': ('executor.html#executor.__init__', 'emb_opt/executor.py'),
                                  'emb_opt.executor.Executor.batch_inputs': ('executor.html#executor.batch_inputs', 'emb_opt/executor.py'),
                                  'emb_opt.executor.Executor.execute': ('executor.html#executor.execute', 'emb_opt/executor.py'),
                                  'emb_opt.executor.Executor.unbatch_inputs': ( 'executor.html#executor.unbatch_inputs',
                                                                                'emb_opt/executor.py'),
                                  'emb_opt.executor.ProcessExecutor': ('executor.html#processexecutor', 'emb_opt/executor.py'),
                                  'emb_opt.executor.ProcessExecutor.__init__': ( 'executor.html#processexecutor.__init__',
                                                                                 'emb_opt/executor.py'),
                                  'emb_opt.executor.ProcessExecutor.execute': ( 'executor.html#processexecutor.execute',
                                                                                'emb_opt/executor.py'),
                                  'emb_opt.executor.ThreadExecutor': ('executor.html#threadexecutor', 'emb_opt/executor.py'),
                                  'emb_opt.executor.ThreadExecutor.__init__': ( 'executor.html#threadexecutor.__init__',
                                                                                'emb_opt/executor.py'),
                                  'emb_opt.executor.ThreadExecutor.execute': ( 'executor.html#threadexecutor.execute',
                                                                               'emb_opt/executor.py')},
            'emb_opt.filter': { 'emb_opt.filter.CompositeFilterPlugin': ('filter.html#compositefilterplugin', 'emb_opt/filter.py'),
                                'emb_opt.filter.CompositeFilterPlugin.__call__': ( 'filter.html#compositefilterplugin.__call__',
                                                                                   'emb_opt/filter.py'),
                                'emb_opt.filter.CompositeFilterPlugin.__init__': ( 'filter.html#compositefilterplugin.__init__',
                                                                                   'emb_opt/filter.py'),
                                'emb_opt.filter.FilterModule': ('filter.html#filtermodule', 'emb_opt/filter.py'),
                                'emb_opt.filter.FilterModule.__init__': ('filter.html#filtermodule.__init__', 'emb_opt/filter.py'),
                                'emb_opt.filter.FilterModule.gather_inputs': ( 'filter.html#filtermodule.gather_inputs',
                                                                               'emb_opt/filter.py'),
                                'emb_opt.filter.FilterModule.scatter_results': ( 'filter.html#filtermodule.scatter_results',
                                                                                 'emb_opt/filter.py'),
                                'emb_opt.filter.FilterPlugin': ('filter.html#filterplugin', 'emb_opt/filter.py'),
                                'emb_opt.filter.FilterPlugin.__call__': ('filter.html#filterplugin.__call__', 'emb_opt/filter.py')},
            'emb_opt.imports': {},
            'emb_opt.log': { 'emb_opt.log.Log': ('log.html#log', 'emb_opt/log.py'),
                             'emb_opt.log.Log.__init__': ('log.html#log.__init__', 'emb_opt/log.py'),
                             'emb_opt.log.Log.add_batch': ('log.html#log.add_batch', 'emb_opt/log.py'),
                             'emb_opt.log.Log.compile_results': ('log.html#log.compile_results', 'emb_opt/log.py'),
                             'emb_opt.log.Log.dump_batch_log': ('log.html#log.dump_batch_log', 'emb_opt/log.py'),
                             'emb_opt.log.Log.get_item': ('log.html#log.get_item', 'emb_opt/log.py'),
                             'emb_opt.log.Node': ('log.html#node', 'emb_opt/log.py'),
                             'emb_opt.log.Node.__init__': ('log.html#node.__init__', 'emb_opt/log.py'),
                             'emb_opt.log.Node.add_child': ('log.html#node.add_child', 'emb_opt/log.py'),
                             'emb_opt.log.Node.add_parent': ('log.html#node.add_parent', 'emb_opt/log.py'),
                             'emb_opt.log.Node.prepare': ('log.html#node.prepare', 'emb_opt/log.py'),
                             'emb_opt.log.QueryTree': ('log.html#querytree', 'emb_opt/log.py'),
                             'emb_opt.log.QueryTree.__init__': ('log.html#querytree.__init__', 'emb_opt/log.py'),
                             'emb_opt.log.QueryTree.add_node': ('log.html#querytree.add_node', 'emb_opt/log.py'),
                             'emb_opt.log.QueryTree.backtrack_node': ('log.html#querytree.backtrack_node', 'emb_opt/log.py'),
                             'emb_opt.log.QueryTree.leaf_nodes': ('log.html#querytree.leaf_nodes', 'emb_opt/log.py')},
            'emb_opt.module': { 'emb_opt.module.Module': ('module.html#module', 'emb_opt/module.py'),
                                'emb_opt.module.Module.__call__': ('module.html#module.__call__', 'emb_opt/module.py'),
                                'emb_opt.module.Module.__init__': ('module.html#module.__init__', 'emb_opt/module.py'),
                                'emb_opt.module.Module.gather_inputs': ('module.html#module.gather_inputs', 'emb_opt/module.py'),
                                'emb_opt.module.Module.scatter_results': ('module.html#module.scatter_results', 'emb_opt/module.py'),
                                'emb_opt.module.Module.validate_schema': ('module.html#module.validate_schema', 'emb_opt/module.py')},
            'emb_opt.plugins.faiss': { 'emb_opt.plugins.faiss.FaissDataPlugin': ( 'plugins/faiss.html#faissdataplugin',
                                                                                  'emb_opt/plugins/faiss.py'),
                                       'emb_opt.plugins.faiss.FaissDataPlugin.__call__': ( 'plugins/faiss.html#faissdataplugin.__call__',
                                                                                           'emb_opt/plugins/faiss.py'),
                                       'emb_opt.plugins.faiss.FaissDataPlugin.__init__': ( 'plugins/faiss.html#faissdataplugin.__init__',
                                                                                           'emb_opt/plugins/faiss.py')},
            'emb_opt.plugins.huggingface': { 'emb_opt.plugins.huggingface.DatasetExecutor': ( 'plugins/hf.html#datasetexecutor',
                                                                                              'emb_opt/plugins/huggingface.py'),
                                             'emb_opt.plugins.huggingface.DatasetExecutor.__init__': ( 'plugins/hf.html#datasetexecutor.__init__',
                                                                                                       'emb_opt/plugins/huggingface.py'),
                                             'emb_opt.plugins.huggingface.DatasetExecutor.batch_inputs': ( 'plugins/hf.html#datasetexecutor.batch_inputs',
                                                                                                           'emb_opt/plugins/huggingface.py'),
                                             'emb_opt.plugins.huggingface.DatasetExecutor.execute': ( 'plugins/hf.html#datasetexecutor.execute',
                                                                                                      'emb_opt/plugins/huggingface.py'),
                                             'emb_opt.plugins.huggingface.DatasetExecutor.unbatch_inputs': ( 'plugins/hf.html#datasetexecutor.unbatch_inputs',
                                                                                                             'emb_opt/plugins/huggingface.py'),
                                             'emb_opt.plugins.huggingface.HugggingfaceDataPlugin': ( 'plugins/hf.html#hugggingfacedataplugin',
                                                                                                     'emb_opt/plugins/huggingface.py'),
                                             'emb_opt.plugins.huggingface.HugggingfaceDataPlugin.__call__': ( 'plugins/hf.html#hugggingfacedataplugin.__call__',
                                                                                                              'emb_opt/plugins/huggingface.py'),
                                             'emb_opt.plugins.huggingface.HugggingfaceDataPlugin.__init__': ( 'plugins/hf.html#hugggingfacedataplugin.__init__',
                                                                                                              'emb_opt/plugins/huggingface.py')},
            'emb_opt.plugins.qdrant': { 'emb_opt.plugins.qdrant.QdrantDataPlugin': ( 'plugins/qdrant.html#qdrantdataplugin',
                                                                                     'emb_opt/plugins/qdrant.py'),
                                        'emb_opt.plugins.qdrant.QdrantDataPlugin.__call__': ( 'plugins/qdrant.html#qdrantdataplugin.__call__',
                                                                                              'emb_opt/plugins/qdrant.py'),
                                        'emb_opt.plugins.qdrant.QdrantDataPlugin.__init__': ( 'plugins/qdrant.html#qdrantdataplugin.__init__',
                                                                                              'emb_opt/plugins/qdrant.py')},
            'emb_opt.prune': { 'emb_opt.prune.PruneModule': ('prune.html#prunemodule', 'emb_opt/prune.py'),
                               'emb_opt.prune.PruneModule.__init__': ('prune.html#prunemodule.__init__', 'emb_opt/prune.py'),
                               'emb_opt.prune.PruneModule.gather_inputs': ('prune.html#prunemodule.gather_inputs', 'emb_opt/prune.py'),
                               'emb_opt.prune.PruneModule.scatter_results': ('prune.html#prunemodule.scatter_results', 'emb_opt/prune.py'),
                               'emb_opt.prune.PrunePlugin': ('prune.html#pruneplugin', 'emb_opt/prune.py'),
                               'emb_opt.prune.PrunePlugin.__call__': ('prune.html#pruneplugin.__call__', 'emb_opt/prune.py'),
                               'emb_opt.prune.TopKPrune': ('prune.html#topkprune', 'emb_opt/prune.py'),
                               'emb_opt.prune.TopKPrune.__call__': ('prune.html#topkprune.__call__', 'emb_opt/prune.py'),
                               'emb_opt.prune.TopKPrune.__init__': ('prune.html#topkprune.__init__', 'emb_opt/prune.py'),
                               'emb_opt.prune.TopKPrune.agg_scores': ('prune.html#topkprune.agg_scores', 'emb_opt/prune.py'),
                               'emb_opt.prune.TopKPrune.get_group_key': ('prune.html#topkprune.get_group_key', 'emb_opt/prune.py'),
                               'emb_opt.prune.TopKPrune.group_queries': ('prune.html#topkprune.group_queries', 'emb_opt/prune.py'),
                               'emb_opt.prune.TopKPrune.prune_queries': ('prune.html#topkprune.prune_queries', 'emb_opt/prune.py'),
                               'emb_opt.prune.TopKPrune.scatter_queries': ('prune.html#topkprune.scatter_queries', 'emb_opt/prune.py')},
            'emb_opt.runner': { 'emb_opt.runner.Runner': ('runner.html#runner', 'emb_opt/runner.py'),
                                'emb_opt.runner.Runner.__init__': ('runner.html#runner.__init__', 'emb_opt/runner.py'),
                                'emb_opt.runner.Runner.prepare_batch': ('runner.html#runner.prepare_batch', 'emb_opt/runner.py'),
                                'emb_opt.runner.Runner.report_scores': ('runner.html#runner.report_scores', 'emb_opt/runner.py'),
                                'emb_opt.runner.Runner.search': ('runner.html#runner.search', 'emb_opt/runner.py'),
                                'emb_opt.runner.Runner.step': ('runner.html#runner.step', 'emb_opt/runner.py')},
            'emb_opt.schemas': { 'emb_opt.schemas.Batch': ('schemas.html#batch', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Batch.__getitem__': ('schemas.html#batch.__getitem__', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Batch.__iter__': ('schemas.html#batch.__iter__', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Batch.__len__': ('schemas.html#batch.__len__', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Batch.enumerate_queries': ('schemas.html#batch.enumerate_queries', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Batch.enumerate_query_results': ( 'schemas.html#batch.enumerate_query_results',
                                                                                    'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Batch.flatten_queries': ('schemas.html#batch.flatten_queries', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Batch.flatten_query_results': ( 'schemas.html#batch.flatten_query_results',
                                                                                  'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Batch.get_item': ('schemas.html#batch.get_item', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Batch.valid_queries': ('schemas.html#batch.valid_queries', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.DataSourceResponse': ('schemas.html#datasourceresponse', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.FilterResponse': ('schemas.html#filterresponse', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.InteralData': ('schemas.html#interaldata', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Item': ('schemas.html#item', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Item._fill_internal': ('schemas.html#item._fill_internal', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Item.from_minimal': ('schemas.html#item.from_minimal', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Item.update_internal': ('schemas.html#item.update_internal', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.PruneResponse': ('schemas.html#pruneresponse', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Query': ('schemas.html#query', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Query.__getitem__': ('schemas.html#query.__getitem__', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Query.__iter__': ('schemas.html#query.__iter__', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Query.__len__': ('schemas.html#query.__len__', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Query._fill_internal': ('schemas.html#query._fill_internal', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Query.add_query_results': ('schemas.html#query.add_query_results', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Query.enumerate_query_results': ( 'schemas.html#query.enumerate_query_results',
                                                                                    'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Query.from_item': ('schemas.html#query.from_item', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Query.from_minimal': ('schemas.html#query.from_minimal', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Query.from_parent_query': ('schemas.html#query.from_parent_query', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Query.update_internal': ('schemas.html#query.update_internal', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.Query.valid_results': ('schemas.html#query.valid_results', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.ScoreResponse': ('schemas.html#scoreresponse', 'emb_opt/schemas.py'),
                                 'emb_opt.schemas.UpdateResponse': ('schemas.html#updateresponse', 'emb_opt/schemas.py')},
            'emb_opt.score': { 'emb_opt.score.CompositeScorePlugin': ('score.html#compositescoreplugin', 'emb_opt/score.py'),
                               'emb_opt.score.CompositeScorePlugin.__call__': ( 'score.html#compositescoreplugin.__call__',
                                                                                'emb_opt/score.py'),
                               'emb_opt.score.CompositeScorePlugin.__init__': ( 'score.html#compositescoreplugin.__init__',
                                                                                'emb_opt/score.py'),
                               'emb_opt.score.ScoreModule': ('score.html#scoremodule', 'emb_opt/score.py'),
                               'emb_opt.score.ScoreModule.__init__': ('score.html#scoremodule.__init__', 'emb_opt/score.py'),
                               'emb_opt.score.ScoreModule.gather_inputs': ('score.html#scoremodule.gather_inputs', 'emb_opt/score.py'),
                               'emb_opt.score.ScoreModule.scatter_results': ('score.html#scoremodule.scatter_results', 'emb_opt/score.py'),
                               'emb_opt.score.ScorePlugin': ('score.html#scoreplugin', 'emb_opt/score.py'),
                               'emb_opt.score.ScorePlugin.__call__': ('score.html#scoreplugin.__call__', 'emb_opt/score.py')},
            'emb_opt.update': { 'emb_opt.update.RLUpdate': ('update.html#rlupdate', 'emb_opt/update.py'),
                                'emb_opt.update.RLUpdate.__call__': ('update.html#rlupdate.__call__', 'emb_opt/update.py'),
                                'emb_opt.update.RLUpdate.__init__': ('update.html#rlupdate.__init__', 'emb_opt/update.py'),
                                'emb_opt.update.RLUpdate.compute_grad': ('update.html#rlupdate.compute_grad', 'emb_opt/update.py'),
                                'emb_opt.update.TopKContinuousUpdate': ('update.html#topkcontinuousupdate', 'emb_opt/update.py'),
                                'emb_opt.update.TopKContinuousUpdate.__call__': ( 'update.html#topkcontinuousupdate.__call__',
                                                                                  'emb_opt/update.py'),
                                'emb_opt.update.TopKContinuousUpdate.__init__': ( 'update.html#topkcontinuousupdate.__init__',
                                                                                  'emb_opt/update.py'),
                                'emb_opt.update.TopKDiscreteUpdate': ('update.html#topkdiscreteupdate', 'emb_opt/update.py'),
                                'emb_opt.update.TopKDiscreteUpdate.__call__': ( 'update.html#topkdiscreteupdate.__call__',
                                                                                'emb_opt/update.py'),
                                'emb_opt.update.TopKDiscreteUpdate.__init__': ( 'update.html#topkdiscreteupdate.__init__',
                                                                                'emb_opt/update.py'),
                                'emb_opt.update.UpdateModule': ('update.html#updatemodule', 'emb_opt/update.py'),
                                'emb_opt.update.UpdateModule.__call__': ('update.html#updatemodule.__call__', 'emb_opt/update.py'),
                                'emb_opt.update.UpdateModule.__init__': ('update.html#updatemodule.__init__', 'emb_opt/update.py'),
                                'emb_opt.update.UpdateModule.gather_inputs': ( 'update.html#updatemodule.gather_inputs',
                                                                               'emb_opt/update.py'),
                                'emb_opt.update.UpdateModule.scatter_results': ( 'update.html#updatemodule.scatter_results',
                                                                                 'emb_opt/update.py'),
                                'emb_opt.update.UpdatePlugin': ('update.html#updateplugin', 'emb_opt/update.py'),
                                'emb_opt.update.UpdatePlugin.__call__': ('update.html#updateplugin.__call__', 'emb_opt/update.py'),
                                'emb_opt.update.UpdatePluginGradientWrapper': ( 'update.html#updateplugingradientwrapper',
                                                                                'emb_opt/update.py'),
                                'emb_opt.update.UpdatePluginGradientWrapper.__call__': ( 'update.html#updateplugingradientwrapper.__call__',
                                                                                         'emb_opt/update.py'),
                                'emb_opt.update.UpdatePluginGradientWrapper.__init__': ( 'update.html#updateplugingradientwrapper.__init__',
                                                                                         'emb_opt/update.py')},
            'emb_opt.utils': { 'emb_opt.utils.batch_list': ('utils.html#batch_list', 'emb_opt/utils.py'),
                               'emb_opt.utils.build_batch_from_embeddings': ('utils.html#build_batch_from_embeddings', 'emb_opt/utils.py'),
                               'emb_opt.utils.build_batch_from_items': ('utils.html#build_batch_from_items', 'emb_opt/utils.py'),
                               'emb_opt.utils.clip_grad': ('utils.html#clip_grad', 'emb_opt/utils.py'),
                               'emb_opt.utils.compute_rl_grad': ('utils.html#compute_rl_grad', 'emb_opt/utils.py'),
                               'emb_opt.utils.query_to_rl_inputs': ('utils.html#query_to_rl_inputs', 'emb_opt/utils.py'),
                               'emb_opt.utils.unbatch_list': ('utils.html#unbatch_list', 'emb_opt/utils.py'),
                               'emb_opt.utils.whiten': ('utils.html#whiten', 'emb_opt/utils.py')}}}
