# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/emb_opt',
                'doc_host': 'https://DarkMatterAI.github.io',
                'git_url': 'https://github.com/DarkMatterAI/emb_opt',
                'lib_path': 'emb_opt'},
  'syms': { 'emb_opt.backends.chroma': { 'emb_opt.backends.chroma.ChromaDatabase': ( 'chroma.html#chromadatabase',
                                                                                     'emb_opt/backends/chroma.py'),
                                         'emb_opt.backends.chroma.ChromaDatabase.__init__': ( 'chroma.html#chromadatabase.__init__',
                                                                                              'emb_opt/backends/chroma.py'),
                                         'emb_opt.backends.chroma.ChromaDatabase.query': ( 'chroma.html#chromadatabase.query',
                                                                                           'emb_opt/backends/chroma.py')},
            'emb_opt.backends.faiss': { 'emb_opt.backends.faiss.FaissDatabase': ('faiss.html#faissdatabase', 'emb_opt/backends/faiss.py'),
                                        'emb_opt.backends.faiss.FaissDatabase.__init__': ( 'faiss.html#faissdatabase.__init__',
                                                                                           'emb_opt/backends/faiss.py'),
                                        'emb_opt.backends.faiss.FaissDatabase.query': ( 'faiss.html#faissdatabase.query',
                                                                                        'emb_opt/backends/faiss.py')},
            'emb_opt.backends.hf': { 'emb_opt.backends.hf.HFDatabase': ('huggingface.html#hfdatabase', 'emb_opt/backends/hf.py'),
                                     'emb_opt.backends.hf.HFDatabase.__init__': ( 'huggingface.html#hfdatabase.__init__',
                                                                                  'emb_opt/backends/hf.py'),
                                     'emb_opt.backends.hf.HFDatabase.query': ( 'huggingface.html#hfdatabase.query',
                                                                               'emb_opt/backends/hf.py')},
            'emb_opt.backends.qdrant': { 'emb_opt.backends.qdrant.QdrantDatabase': ( 'qdrant.html#qdrantdatabase',
                                                                                     'emb_opt/backends/qdrant.py'),
                                         'emb_opt.backends.qdrant.QdrantDatabase.__init__': ( 'qdrant.html#qdrantdatabase.__init__',
                                                                                              'emb_opt/backends/qdrant.py'),
                                         'emb_opt.backends.qdrant.QdrantDatabase.query': ( 'qdrant.html#qdrantdatabase.query',
                                                                                           'emb_opt/backends/qdrant.py')},
            'emb_opt.core': { 'emb_opt.core.Filter': ('core.html#filter', 'emb_opt/core.py'),
                              'emb_opt.core.Filter.__call__': ('core.html#filter.__call__', 'emb_opt/core.py'),
                              'emb_opt.core.Filter.__init__': ('core.html#filter.__init__', 'emb_opt/core.py'),
                              'emb_opt.core.PassThroughFilter': ('core.html#passthroughfilter', 'emb_opt/core.py'),
                              'emb_opt.core.PassThroughFilter.__call__': ('core.html#passthroughfilter.__call__', 'emb_opt/core.py'),
                              'emb_opt.core.PassThroughFilter.__init__': ('core.html#passthroughfilter.__init__', 'emb_opt/core.py'),
                              'emb_opt.core.QueryResult': ('core.html#queryresult', 'emb_opt/core.py'),
                              'emb_opt.core.QueryResult.__init__': ('core.html#queryresult.__init__', 'emb_opt/core.py'),
                              'emb_opt.core.QueryResult.to_dict': ('core.html#queryresult.to_dict', 'emb_opt/core.py'),
                              'emb_opt.core.Score': ('core.html#score', 'emb_opt/core.py'),
                              'emb_opt.core.Score.__call__': ('core.html#score.__call__', 'emb_opt/core.py'),
                              'emb_opt.core.Score.__init__': ('core.html#score.__init__', 'emb_opt/core.py'),
                              'emb_opt.core.VectorDatabase': ('core.html#vectordatabase', 'emb_opt/core.py'),
                              'emb_opt.core.VectorDatabase.query': ('core.html#vectordatabase.query', 'emb_opt/core.py'),
                              'emb_opt.core.dataset_from_query_results': ('core.html#dataset_from_query_results', 'emb_opt/core.py')},
            'emb_opt.imports': {},
            'emb_opt.query_update': { 'emb_opt.query_update.QueryUpdate': ('query_update.html#queryupdate', 'emb_opt/query_update.py'),
                                      'emb_opt.query_update.QueryUpdate.__call__': ( 'query_update.html#queryupdate.__call__',
                                                                                     'emb_opt/query_update.py'),
                                      'emb_opt.query_update.RLUpdate': ('query_update.html#rlupdate', 'emb_opt/query_update.py'),
                                      'emb_opt.query_update.RLUpdate.__call__': ( 'query_update.html#rlupdate.__call__',
                                                                                  'emb_opt/query_update.py'),
                                      'emb_opt.query_update.RLUpdate.__init__': ( 'query_update.html#rlupdate.__init__',
                                                                                  'emb_opt/query_update.py'),
                                      'emb_opt.query_update.TopKUpdate': ('query_update.html#topkupdate', 'emb_opt/query_update.py'),
                                      'emb_opt.query_update.TopKUpdate.__call__': ( 'query_update.html#topkupdate.__call__',
                                                                                    'emb_opt/query_update.py'),
                                      'emb_opt.query_update.TopKUpdate.__init__': ( 'query_update.html#topkupdate.__init__',
                                                                                    'emb_opt/query_update.py')},
            'emb_opt.runner': { 'emb_opt.runner.Runner': ('runner.html#runner', 'emb_opt/runner.py'),
                                'emb_opt.runner.Runner.__init__': ('runner.html#runner.__init__', 'emb_opt/runner.py'),
                                'emb_opt.runner.Runner.search': ('runner.html#runner.search', 'emb_opt/runner.py'),
                                'emb_opt.runner.SearchLog': ('runner.html#searchlog', 'emb_opt/runner.py'),
                                'emb_opt.runner.SearchLog.__init__': ('runner.html#searchlog.__init__', 'emb_opt/runner.py'),
                                'emb_opt.runner.SearchLog.add_entry': ('runner.html#searchlog.add_entry', 'emb_opt/runner.py'),
                                'emb_opt.runner.SearchLog.compile_results': ('runner.html#searchlog.compile_results', 'emb_opt/runner.py'),
                                'emb_opt.runner.SearchLog.compile_trajectories': ( 'runner.html#searchlog.compile_trajectories',
                                                                                   'emb_opt/runner.py')},
            'emb_opt.utils': { 'emb_opt.utils.pack_dataset': ('utils.html#pack_dataset', 'emb_opt/utils.py'),
                               'emb_opt.utils.whiten': ('utils.html#whiten', 'emb_opt/utils.py')}}}
