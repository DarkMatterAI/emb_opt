# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_utils.ipynb.

# %% auto 0
__all__ = ['batch_list', 'unbatch_list', 'whiten', 'build_batch_from_embeddings', 'build_batch_from_items']

# %% ../nbs/01_utils.ipynb 3
from .imports import *
from .schemas import Batch, Query, Item

# %% ../nbs/01_utils.ipynb 4
def batch_list(inputs: list, 
               batch_size: int
              ) -> list[list]:
    if batch_size==0:
        output = [inputs]
    else:
        output = [inputs[i:i+batch_size] for i in range(0, len(inputs), batch_size)]
    return output

def unbatch_list(inputs: list[list]) -> list:
    return [item for sublist in inputs for item in sublist]

# %% ../nbs/01_utils.ipynb 6
def whiten(scores: np.ndarray # vector shape (n,) of scores to whiten
          ) -> np.ndarray: # vector shape (n,) whitened scores
    'Whitens vector of scores'
    mean = scores.mean()
    var = scores.var()
    
    return (scores - mean) / np.sqrt(var + 1e-8)

# %% ../nbs/01_utils.ipynb 7
def build_batch_from_embeddings(embeddings: List[List[float]]) -> Batch:
    queries = []
    for i, embedding in enumerate(embeddings):
        query = Query.from_minimal(embedding=embedding)
        query.update_internal(collection_id=i)
        queries.append(query)
        
    batch = Batch(queries=queries) 
    return batch

# %% ../nbs/01_utils.ipynb 9
def build_batch_from_items(items: List[Item], remap_collections=False) -> Batch:
    queries = []
    for i, item in enumerate(items):
        query = Query.from_item(item)
        if remap_collections:
            query.update_internal(collection_id=i)
        queries.append(query)
    batch = Batch(queries=queries) 
    return batch
