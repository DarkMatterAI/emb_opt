# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_utils.ipynb.

# %% auto 0
__all__ = ['QueryResult', 'QueryDataset']

# %% ../nbs/00_utils.ipynb 3
from .imports import *

# %% ../nbs/00_utils.ipynb 4
class QueryResult():
    def __init__(self, 
                 query_idx: int, 
                 db_idx: int, 
                 embedding: np.ndarray, 
                 distance: float, 
                 data: dict
                ):
        self.query_idx = query_idx
        self.db_idx = db_idx
        self.embedding = embedding
        self.distance = distance
        self.data = data
        
    def to_dict(self) -> dict:
        return {
            'query_idx' : self.query_idx,
            'db_idx' : self.db_idx,
            'embedding' : self.embedding,
            'distance' : self.distance,
            'data' : self.data
        }

# %% ../nbs/00_utils.ipynb 5
class QueryDataset(Dataset):
    def index_with_query_idx(self, idx: int) -> Dataset:
        return self.filter(lambda row: row['query_idx']==idx)
    
    def pack_with_query_idx(self, idx: int, pack_cols: list[str]) -> dict[str, np.ndarray]:
        subset = self.index_with_query_idx(idx)
        outputs = {}
        for col_name in pack_cols:
            outputs[col_name] = np.array(subset[col_name])
            
        return outputs
    
    @classmethod
    def from_query_results(cls, query_results: list[QueryResult]):
        data_dicts = [i.to_dict() for i in query_results]
        return cls.from_list(data_dicts)
