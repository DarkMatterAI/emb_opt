# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/10_runner.ipynb.

# %% auto 0
__all__ = ['Runner']

# %% ../nbs/10_runner.ipynb 3
from .imports import *
from .schemas import (
                                Query, 
                                Batch,
                                DataSourceFunction,
                                FilterFunction,
                                ScoreFunction,
                                PruneFunction,
                                UpdateFunction
                            )
from .data_source import DataSourceModule
from .filter import FilterModule
from .score import ScoreModule
from .prune import PruneModule
from .update import UpdateModule
from .log import Log

# %% ../nbs/10_runner.ipynb 4
class Runner():
    def __init__(self,
                 data_plugin: DataSourceFunction,
                 filter_plugin: Optional[FilterFunction],
                 score_plugin: ScoreFunction,
                 prune_plugin: Optional[PruneFunction],
                 update_plugin: UpdateFunction
                ):
        self.data_module = DataSourceModule(data_plugin)
        self.filter_module = FilterModule(filter_plugin) #if filter_plugin else None
        self.score_module = ScoreModule(score_plugin)
        self.prune_module = PruneModule(prune_plugin) #if prune_plugin else None
        self.update_module = UpdateModule(update_plugin)
        
    def prepare_batch(self, batch: Batch, iteration: int):
        for query in batch.queries:
            query.update_internal(iteration=iteration)

            
    def step(self, batch: Batch, log: Log, iteration: int, verbose: bool=True):
        self.prepare_batch(batch, iteration)
        
        batch = self.data_module(batch)
        batch = self.filter_module(batch)
        batch = self.score_module(batch)
        batch = self.prune_module(batch)
        
        log.add_batch(batch)
        self.report_scores(batch, iteration, verbose)
        
        if len(list(batch.valid_queries()))>0:
            batch = self.update_module(batch)
        else:
            batch = None
        return batch
        
    def search(self, batch: Batch, iterations: int, log: Optional[Log]=None, verbose: bool=True):
        if log is None:
            log = Log()
            
        i_start = len(log.batch_log)
            
        for i in range(i_start, i_start+iterations):
            batch = self.step(batch, log, i, verbose)
            if batch is None:
                break
            
        return batch, log
            
    def report_scores(self, batch, iteration, report):
        if report:
            mean_scores = [np.array([i.score for i in query.valid_results()]).mean() 
                      for query in batch.flatten_queries()[1]]
            print(iteration, ' '.join([f'{i:.2f}' for i in mean_scores]))
