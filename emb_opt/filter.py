# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_filter.ipynb.

# %% auto 0
__all__ = ['FilterModule', 'FilterPlugin']

# %% ../nbs/05_filter.ipynb 3
from .imports import *
from .module import Module
from .schemas import Item, Query, Batch, FilterFunction, FilterResponse

# %% ../nbs/05_filter.ipynb 4
class FilterModule(Module):
    def __init__(self,
                 function: FilterFunction
                ):
        super().__init__(FilterResponse, function)
        
    def gather_inputs(self, batch: Batch) -> (List[Tuple], List[Item]):
        idxs, inputs = batch.flatten_query_results()
        return (idxs, inputs)
        
    def scatter_results(self, batch: Batch, idxs: List[Tuple], results: List[FilterResponse]):
        for (q_idx, r_idx), result in zip(idxs, results):
            batch_item = batch.get_item(q_idx, r_idx)
            if result.data:
                batch_item.data.update(result.data)
                
            if not result.valid:
                batch_item.update_internal(removed=True, removal_reason='filter response invalid')
                
        for query in batch:
            query.update_internal()

# %% ../nbs/05_filter.ipynb 6
class FilterPlugin():
    def __call__(self, inputs: List[Query]) -> List[FilterResponse]:
        pass
