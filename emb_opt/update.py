# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/07_update.ipynb.

# %% auto 0
__all__ = ['UpdateModule', 'ContinuousUpdateModule', 'DiscreteUpdateModule']

# %% ../nbs/07_update.ipynb 3
from .imports import *
from .core import Module
from .schemas import (
                            Item, 
                            Query, 
                            Batch, 
                            UpdateFunction,
                            DiscreteUpdateFunction,
                            ContinuousUpdateFunction,
                            ContinuousUpdateResponse
                            )

# %% ../nbs/07_update.ipynb 4
class UpdateModule(Module):
    def __init__(self,
                 function: UpdateFunction,
                ):
        super().__init__(Query, function)
        
    def gather_inputs(self, batch: Batch) -> (List[Tuple], List[Query]):
        idxs, inputs = batch.flatten_queries()
        return (idxs, inputs)
    
    def build_batch(self, results: List[Query]) -> Batch:
        return Batch(queries=results)
        
    def __call__(self, batch: Batch) -> Batch:
        
        idxs, inputs = self.gather_inputs(batch)
        results = self.function(inputs)
        results = self.validate_schema(results)
        batch = self.build_batch(results)
        return batch

# %% ../nbs/07_update.ipynb 6
class ContinuousUpdateModule(UpdateModule):
    def __init__(self, function: ContinuousUpdateFunction):
        super().__init__(function)
        self.output_schema = ContinuousUpdateResponse
    
    def build_batch(self, results: List[ContinuousUpdateResponse]) -> Batch:
        queries = [Query.from_parent(i.embedding, i.parent_query) for i in results]
        return Batch(queries=queries)

# %% ../nbs/07_update.ipynb 8
class DiscreteUpdateModule(UpdateModule):
    def __init__(self, function: DiscreteUpdateFunction):
        super().__init__(function)
        self.output_schema = Item
    
    def build_batch(self, results: List[Item]) -> Batch:
        queries = [Query.from_item(i) for i in results]
        return Batch(queries=queries)
