# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/03_faiss.ipynb.

# %% auto 0
__all__ = ['FaissDatabase']

# %% ../../nbs/03_faiss.ipynb 3
from ..imports import *
from ..core import QueryResult, VectorDatabase, dataset_from_query_results
try:
    import faiss
except:
    warnings.warn('faiss import failed - check if package is installed')

# %% ../../nbs/03_faiss.ipynb 5
class FaissDatabase(VectorDatabase):
    'Faiss backend'
    def __init__(self, 
                 faiss_index: faiss.Index, # faiss index to query
                 k: int, # query will return `k` values per query vector
                 search_params: Optional[faiss.SearchParameters]=None # search params for `faiss_index.search`
                ):
        
        self.faiss_index = faiss_index
        self.k = k
        self.search_params = search_params
        
    def query(self, query_vectors: np.ndarray) -> Dataset:
        distances, indices = self.faiss_index.search(query_vectors, self.k, params=self.search_params)
        
        n_queries, n_results = indices.shape
        
        results = []
        for query_idx in range(n_queries):
            embeddings = self.faiss_index.reconstruct_batch(indices[query_idx])
            
            for result_idx in range(n_results):
                db_idx = indices[query_idx, result_idx]
                embedding = embeddings[result_idx]
                distance = distances[query_idx, result_idx]
                
                if db_idx != -1:
                    result = QueryResult(query_idx, db_idx, embedding, distance, {})
                    results.append(result)
                
        return dataset_from_query_results(results)
