# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/06_chroma.ipynb.

# %% auto 0
__all__ = ['ChromaDatabase']

# %% ../../nbs/06_chroma.ipynb 3
from ..imports import *
from ..core import QueryDataset, QueryResult, VectorDatabase

try:
    import chromadb
    from chromadb.api import Collection
except:
    warnings.warn('Failed to import Chroma - check package install')

# %% ../../nbs/06_chroma.ipynb 4
class ChromaDatabase(VectorDatabase):
    def __init__(self, 
                 chroma_collection: Collection,
                 k: int,
                 query_kwargs: Optional[dict]=None
                ):
        self.collection = collection
        self.k = k
        self.query_kwargs = query_kwargs if query_kwargs else {}
    
    def query(self, query_vectors: np.ndarray) -> QueryDataset:
        
        res = self.collection.query(query_embeddings=[list(i) for i in query_vectors],
                                    include=['documents', 'embeddings', 'metadatas', 'distances'],
                                    n_results = self.k,
                                    **self.query_kwargs
                                   )
        
        results = []
        n_queries = query_vectors.shape[0]
        n_results = self.k
        for query_idx in range(n_queries):
            for result_idx in range(n_results):
                result = QueryResult(query_idx,
                                     res['ids'][query_idx][result_idx],
                                     np.array(res['embeddings'][query_idx][result_idx]),
                                     res['distances'][query_idx][result_idx],
                                     {'document' : res['documents'][query_idx][result_idx],
                                      'metadata' : res['metadatas'][query_idx][result_idx]}
                                    )
                results.append(result)
        
        
        return QueryDataset.from_query_results(results)
