# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/05_qdrant.ipynb.

# %% auto 0
__all__ = ['QdrantDatabase']

# %% ../../nbs/05_qdrant.ipynb 3
from ..imports import *
from ..core import QueryResult, VectorDatabase, dataset_from_query_results

try:
    from qdrant_client import QdrantClient
    from qdrant_client.http import models
except:
    warnings.warn('Failed to import Qdrant client - check package install')

# %% ../../nbs/05_qdrant.ipynb 5
class QdrantDatabase(VectorDatabase):
    'Qdrant backend'
    def __init__(self,
                 qdrant_client: QdrantClient, # qdrant client
                 collection_name: str, # qdrant collection name
                 k: int, # return `k` results per query
                 search_request_kwargs: Optional[dict]=None # kwargs for `SearchRequest`
                ):
        self.client = qdrant_client
        self.collection_name = collection_name
        self.k = k
        self.search_request_kwargs = search_request_kwargs if search_request_kwargs else {}
    
    def query(self, query_vectors: np.ndarray) -> Dataset:
        
        search_queries = [
                models.SearchRequest(vector=list(i), 
                                     limit=self.k, 
                                     with_payload=True, 
                                     with_vector=True,
                                     **self.search_request_kwargs
                                    ) 
                for i in query_vectors
                    ]
        
        res = self.client.search_batch(
            collection_name=self.collection_name,
            requests=search_queries
        )
        
        results = []
        for query_idx, result_batch in enumerate(res):
            for point in result_batch:
                result = QueryResult(query_idx, 
                                     point.id, 
                                     point.vector, 
                                     point.score, point.payload)
                
                results.append(result)
        
        return dataset_from_query_results(results)
